Index: lib/gen/qmf/com/redhat/rhm/store/Store.h
===================================================================
--- lib/gen/qmf/com/redhat/rhm/store/Store.h	(revision 4411)
+++ lib/gen/qmf/com/redhat/rhm/store/Store.h	(working copy)
@@ -104,7 +104,8 @@
     void mapDecodeValues(const ::qpid::types::Variant::Map& map);
     void doMethod(std::string&           methodName,
                   const ::qpid::types::Variant::Map& inMap,
-                  ::qpid::types::Variant::Map& outMap);
+                  ::qpid::types::Variant::Map& outMap,
+                  const std::string& userId);
     std::string getKey() const;
 
     uint32_t writePropertiesSize() const;
@@ -113,7 +114,8 @@
     void writeStatistics(std::string& buf, bool skipHeaders = false);
     void doMethod(std::string& methodName,
                   const std::string& inBuf,
-                  std::string& outBuf);
+                  std::string& outBuf,
+                  const std::string& userId);
 
 
     writeSchemaCall_t getWriteSchemaCall() { return writeSchema; }
Index: lib/gen/qmf/com/redhat/rhm/store/Journal.cpp
===================================================================
--- lib/gen/qmf/com/redhat/rhm/store/Journal.cpp	(revision 4411)
+++ lib/gen/qmf/com/redhat/rhm/store/Journal.cpp	(working copy)
@@ -689,7 +689,7 @@
     buf.getRawData(_sBuf, _bufLen);
 }
 
-void Journal::doMethod (string& methodName, const string& inStr, string& outStr)
+void Journal::doMethod (string& methodName, const string& inStr, string& outStr, const string& userId)
 {
     Manageable::status_t status = Manageable::STATUS_UNKNOWN_METHOD;
     std::string          text;
@@ -709,7 +709,11 @@
         _matched = true;
         ArgsJournalExpand ioArgs;
         ioArgs.i_by = inBuf.getLong();
-        status = coreObject->ManagementMethod (METHOD_EXPAND, ioArgs, text);
+        bool allow = coreObject->AuthorizeMethod(METHOD_EXPAND, ioArgs, userId);
+        if (allow)
+            status = coreObject->ManagementMethod (METHOD_EXPAND, ioArgs, text);
+        else
+            status = Manageable::STATUS_FORBIDDEN;
         outBuf.putLong        (status);
         outBuf.putMediumString(::qpid::management::Manageable::StatusText (status, text));
     }
@@ -868,7 +872,7 @@
 
 }
 
-void Journal::doMethod (string& methodName, const ::qpid::types::Variant::Map& inMap, ::qpid::types::Variant::Map& outMap)
+void Journal::doMethod (string& methodName, const ::qpid::types::Variant::Map& inMap, ::qpid::types::Variant::Map& outMap, const string& userId)
 {
     Manageable::status_t status = Manageable::STATUS_UNKNOWN_METHOD;
     std::string          text;
@@ -880,7 +884,11 @@
         if ((_i = inMap.find("by")) != inMap.end()) {
             ioArgs.i_by = _i->second;
         }
-        status = coreObject->ManagementMethod (METHOD_EXPAND, ioArgs, text);
+        bool allow = coreObject->AuthorizeMethod(METHOD_EXPAND, ioArgs, userId);
+        if (allow)
+            status = coreObject->ManagementMethod (METHOD_EXPAND, ioArgs, text);
+        else
+            status = Manageable::STATUS_FORBIDDEN;
         outMap["_status_code"] = (uint32_t) status;
         outMap["_status_text"] = ::qpid::management::Manageable::StatusText(status, text);
         return;
Index: lib/gen/qmf/com/redhat/rhm/store/Journal.h
===================================================================
--- lib/gen/qmf/com/redhat/rhm/store/Journal.h	(revision 4411)
+++ lib/gen/qmf/com/redhat/rhm/store/Journal.h	(working copy)
@@ -134,7 +134,8 @@
     void mapDecodeValues(const ::qpid::types::Variant::Map& map);
     void doMethod(std::string&           methodName,
                   const ::qpid::types::Variant::Map& inMap,
-                  ::qpid::types::Variant::Map& outMap);
+                  ::qpid::types::Variant::Map& outMap,
+                  const std::string& userId);
     std::string getKey() const;
 
     uint32_t writePropertiesSize() const;
@@ -143,7 +144,8 @@
     void writeStatistics(std::string& buf, bool skipHeaders = false);
     void doMethod(std::string& methodName,
                   const std::string& inBuf,
-                  std::string& outBuf);
+                  std::string& outBuf,
+                  const std::string& userId);
 
 
     writeSchemaCall_t getWriteSchemaCall() { return writeSchema; }
Index: lib/gen/qmf/com/redhat/rhm/store/Store.cpp
===================================================================
--- lib/gen/qmf/com/redhat/rhm/store/Store.cpp	(revision 4411)
+++ lib/gen/qmf/com/redhat/rhm/store/Store.cpp	(working copy)
@@ -452,7 +452,7 @@
     buf.getRawData(_sBuf, _bufLen);
 }
 
-void Store::doMethod (string&, const string&, string& outStr)
+void Store::doMethod (string&, const string&, string& outStr, const string&)
 {
     Manageable::status_t status = Manageable::STATUS_UNKNOWN_METHOD;
     std::string          text;
@@ -580,7 +580,7 @@
 
 }
 
-void Store::doMethod (string&, const ::qpid::types::Variant::Map&, ::qpid::types::Variant::Map& outMap)
+void Store::doMethod (string&, const ::qpid::types::Variant::Map&, ::qpid::types::Variant::Map& outMap, const string&)
 {
     Manageable::status_t status = Manageable::STATUS_UNKNOWN_METHOD;
     std::string          text;
