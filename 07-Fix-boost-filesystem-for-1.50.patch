diff -ur old/cpp/src/Makefile.am new/cpp/src/Makefile.am
--- old/cpp/src/Makefile.am       2011-11-08 20:51:12.000000000 +0000
+++ new/cpp/src/Makefile.am   2012-06-30 22:08:20.154433587 +0000
@@ -133,7 +133,7 @@
 tmoduleexecdir = $(libdir)/qpid/tests
 tmoduleexec_LTLIBRARIES=
 
-AM_CXXFLAGS += -DBOOST_FILESYSTEM_VERSION=2
+AM_CXXFLAGS += -DBOOST_FILESYSTEM_VERSION=3

 ## Automake macros to build libraries and executables.
 qpidd_CXXFLAGS = $(AM_CXXFLAGS) -DQPIDD_MODULE_DIR=\"$(dmoduleexecdir)\" -DQPIDD_CONF_FILE=\"$(sysconfdir)/qpidd.conf\"

diff -ur old/cpp/src/qpid/Modules.cpp new/cpp/src/qpid/Modules.cpp
--- old/cpp/src/qpid/Modules.cpp  2011-03-14 20:29:02.000000000 +0000
+++ new/cpp/src/qpid/Modules.cpp      2012-06-30 22:03:13.924937899 +0000
@@ -73,7 +73,7 @@
 
 void loadModuleDir (std::string dirname, bool isDefault)
 {
-    fs::path dirPath (dirname, fs::native);
+    fs::path dirPath (dirname);
 
     if (!fs::exists (dirPath))
     {
@@ -89,8 +89,8 @@
     fs::directory_iterator endItr;
     for (fs::directory_iterator itr (dirPath); itr != endItr; ++itr)
     {
-        if (!fs::is_directory(*itr) && isShlibName(itr->string()))
-            tryShlib (itr->string().data(), true);
+      if (!fs::is_directory(*itr) && isShlibName(itr->path().native()))
+        tryShlib (itr->path().native().data(), true);
     }
 }
 
diff -ur old/cpp/src/qpid/cluster/StoreStatus.cpp new/cpp/src/qpid/cluster/StoreStatus.cpp
--- old/cpp/src/qpid/cluster/StoreStatus.cpp      2010-04-01 17:51:04.000000000 +0000
+++ new/cpp/src/qpid/cluster/StoreStatus.cpp  2012-06-30 22:14:58.942664477 +0000
@@ -77,7 +77,7 @@
         throw Exception(QPID_MSG("No data-dir: When a store is loaded together with clustering, --data-dir must be specified."));
     }
     try {
-        fs::path dir = fs::path(dataDir, fs::native)/SUBDIR;
+        fs::path dir = fs::path(dataDir)/SUBDIR;
         create_directory(dir);
         fs::path file = dir/STORE_STATUS;
         if (fs::exists(file)) {
@@ -106,7 +106,7 @@
     try {
         ostringstream os;
         os << clusterId << endl << shutdownId << endl;
-        fs::path file = fs::path(dataDir, fs::native)/SUBDIR/STORE_STATUS;
+        fs::path file = fs::path(dataDir)/SUBDIR/STORE_STATUS;
         writeFile(file, os.str());
     }
     catch (const std::exception& e) {

